Services:

    application-service:

        Responsible for managing entities like users, posts, groups, and organizations using MySQL.
    Focuses on handling core business logic related to blog creation, user management, and group/organization interactions.


    notification-service:

    Manages notifications, potentially using a different database technology. This separation aligns well with microservices  principles and allows flexibility in choosing the most suitable data storage for this service.


    static-resource-service:

        Handles storage and retrieval of static files, images, and attachments. This service can act as a dedicated resource server.


    API Gateway:

    Provides a unified entry point for client applications to interact with your microservices. This centralizes API management, simplifying the client-side integration and ensuring consistency.

Development:

    * After restarting the services, If we need to restart a particular service run this command.
        docker-compose restart <service-name>
    
    * If we need rebuild the docker image and restart a particular service then run this command.
        docker-compose up --build -d <service-name>



Features:

User Management:

Feature: User
Responsibilities:
User registration and authentication
User profile management
Authorization and access control


Organization Management:

Feature: Organization
Responsibilities:
Create, update, and delete organizations
Assign roles and permissions within organizations
Manage organization-specific settings


Blog Post Management:

Feature: Blog
Responsibilities:
Create, edit, and delete blog posts
Manage blog post categories and tags
Implement features like comments and likes

Blog categories

Feature: categories
Responsibilities:
Users can add tags to their posts and also give the tags in which they are interested.


Public Content Management:

Feature: Public
Responsibilities:
Handle public blog posts accessible without authentication
Manage public content, ensuring it's visible to all users


Notification Service:

Feature: Notification
Responsibilities:
Send notifications for events (e.g., new blog post, comment, group invitation)
Manage user notification preferences


Search and Indexing:

Feature: Search
Responsibilities:
Implement search functionality for blog posts, users, and groups
Index and update search data in real-time
Analytics and Reporting:

Feature: Analytics
Responsibilities:
Collect and analyze user engagement data
Generate reports on blog post views, likes, comments, etc.


Gateway/API Gateway:

Feature: Gateway
Responsibilities:
Expose a unified API for frontend communication
Handle authentication and route requests to the appropriate microservices


Identity and Access Management (IAM):

Feature: IAM
Responsibilities:
Manage user identities, tokens, and authentication
Provide OAuth2 or other authentication services

